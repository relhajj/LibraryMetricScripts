'''
This script searches the 1500 repositories in Top_Repo.txt for import statements of all the library packages in library.txt

Requires:   A configuration file called GitHubSearch.ini
            Ensure a GitHub token generated by your account is in the configuration account so that the script may connect to github 
            
Output:     A text file called popularity_results.txt which has each library along with a number representing how many distinct repositories it was in 
'''

import time
import datetime
import random
import sys
from github import Github
from datetime import date

#This is a sleep function so pause the script since GitHub does not allow frequent calls.
def GotoSleep (msg, timeofSleep):
  
  ts = time.time()
  st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')   
  ErrorMsg = "....    " + msg + str(timeofSleep) + " seconds, Sleeping @ " + st
  print (ErrorMsg) 
  
  time.sleep( timeofSleep )  #actual Sleep
  
  ts = time.time()  
  st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S') 
  ErrorMsg = "....    " + "Waked up @ " + st
  print (ErrorMsg) 

#This is where the search happens, an api query is used to collect results. 
#The query looks like this: "import LIBRARY-NAME" language:java repo:REPO-NAME
#For each Query, if we get ANY results then that means the library was used in that repo
#If we get ZERO results, it means it was not used in that repo
def SearchCodeinRepo(interval, QUERY, g, sleep1, sleep2, max_size, Repo_Array):
   
  RollBack = True
  while RollBack:
    RollBack = False
    frequency = 0
    #check github for rate limit 
    try:
      rate_limit =g.get_rate_limit()
      rate = rate_limit.search            
      # this reate limit is not accurate as github may stop you before you reach your limit.
      print ("search limit: " + str(rate) + ". Reset Time: " + str(rate.reset))
      if rate.remaining == 0:
        #print(f'You have 0/{rate.limit} API calls remianing. Reset time: {rate.reset}')            
        GotoSleep("No more resources to use, Go to sleep for ", sleep2)  

      cnt = 1  
      for repo in Repo_Array:
        cnt = cnt + 1 
        Query_Final = QUERY + " repo:"+repo
        print (Query_Final)
        msgbox = ""
        result = None
        result = g.search_code(Query_Final)  
        if  result.totalCount > 0:             
          frequency =  frequency + 1
        if cnt % 15 == 0:
          GotoSleep("Force to sleep after each iteration, Go to sleep for ", sleep1)
    except:
      GotoSleep("Error: abuse detection mechanism detected,Go to sleep for ", sleep2)
      RollBack = True 
      
  return frequency 

def readLibraries(filenameLib):
    libdict = {}
    with open(filenameLib, "r") as f:
        for line in f:
            line = line.rstrip()
            loc = line.index(":")
            lib_repository = line[:loc]
            lib_package = line[loc+1:]
            libdict[lib_package]=lib_repository            
            
    return libdict
  
def sendtotalstofile(fout, keyword, nofound):
  fout = open(fout, "a")  
  fout.write(keyword + ":" + str(nofound) + "\n")
  fout.close()  

def ReadRepos():
    repoArray = []
    with open("Top_Repo.txt", "r") as f:
        for line in f:          
            repoArray.append(line.rstrip())
    return repoArray

#Reads the ini file data into dict.
#NOTE TO SELF: REMOVE THIS FUNCTION AND ADD A LIBRARY THAT CAN DO THIS FOR ME ----------
def readIniFile():
    dictKeys = {}
    with open("GitHubSearch.ini", "r") as f:
        for line in f:
            line = line.rstrip()
            loc = line.index("]")
            keyword = line[1:loc]
            line = line[loc+2:]
            loc = line.index("]")
            valuekey = line[:loc]
            dictKeys[keyword] = valuekey
    return dictKeys
  
def main():
    
    configDict = readIniFile() # read all ini data
    Repo_Array = ReadRepos()    
    #print (len(Repo_Array))
    
    sleep1 = int (configDict["SLEEP1"]) # regular sleep after each iteration
    sleep2 = int (configDict["SLEEP2"]) # Sleep after a serious issue is detected from gitHib, should be around 10min, ie 600 sec
    max_size = int (configDict["MAXSIZE"]) # max number of results returned per gitHub call, for now it is 1500, but could be changed in the future
    
    g = None
    g = Github(configDict["TOKEN"])   # pass the connection token 
    
    interval = int(configDict["INTERVAL"]) # the time span between each iteration
    
    resultdic = readLibraries(configDict["LIBRARY"]) # read all libraries to search against
    foutname = "popularity_results.txt"  # this is the output file that we are going to send libraries with their total counts to. No duplications here
    
    fout = open(foutname, "w")  
    fout.close()  
    
    for keyword,repo in resultdic.items():  
      
      Query = "\"import " + keyword + "\" "  + configDict["SEARCHTERM"]                
      frequency = SearchCodeinRepo(interval, Query, g, sleep1, sleep2, max_size, Repo_Array) 
      sendtotalstofile(foutname, repo, frequency )
       
    print ("\n Finally ..... Execution is over \n")    
    
main()